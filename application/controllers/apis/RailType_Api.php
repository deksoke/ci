<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

class RailType_Api extends REST_Controller
{
    function __construct()
    {
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key

        $this->load->model("RailType_Model");
        $this->load->model("Bogie_Model");
    }


    public function railtype_get()
    {
        $railtypes = null;

        $id = $this->get("id");
        if ($id === NULL)        {
            $railtypes = $this->RailType_Model->GetData();

            if ($railtypes) {
                foreach($railtypes as $key => $rail){
                    $rail->BOGIES_USAGE = $this->Bogie_Model->GetBogiesUsage_By_RailTypeId($rail->ID);
                }
                $this->response($railtypes, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            } else {
                $this->response([
                    'status' => FALSE,
                    'message' => 'No data were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        $id = (int) $id;
        if ($id <= 0)
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code


        $rail = $this->RailType_Model->GetDataById($id);
        if (!empty($rail)) {
            $rail->BOGIES_USAGE = $this->Bogie_Model->GetBogiesUsage_By_RailTypeId($id);
            $this->set_response($rail, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'Data could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }


    public function railtype_post()
    {
        $entity = $this->post('railtype_data');
        $bogies = $this->post('bogies_data');

        $this->Bogie_Model->Insert($entity);

        $condition = array(
            'RAILTYPE_ID' => $entity->ID
        );
        $this->RailType_Bogies->Delete($condition); //clear all old bogie of this railtype
        $i = 1;
        foreach($bogies as $key => $bogie)
        {
            $bogie_usage = array(
                "RAILTYPE_ID" => $entity->ID,
                "BOGIE_ID" => $bogie->ID,
                "ORDER_SEQ" => $i
            );
            $i += 1;
            $this->RailType_Bogies->Insert($bogie_usage); //insert new bogie
        }

        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
}